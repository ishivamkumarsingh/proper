// Project Structure:
// src/main/java
//   - pages
//     - HomePage.java
//     - ElectronicsPage.java
//     - ProductDetailsPage.java
//     - ShoppingCartPage.java
//   - utils
//     - WebDriverManager.java
//     - WaitUtils.java
// src/test/java
//   - stepdefinitions
//     - WebshopSteps.java
//   - runners
//     - TestRunner.java
// src/test/resources
//   - features
//     - webshop.feature

// src/test/resources/features/webshop.feature
Feature: Shopping Cart Functionality in Demo Webshop

  Scenario: Purchase a smartphone and validate shopping cart
    Given the user opens the demo webshop application
    Then the user should see the correct page title
    When the user navigates to Electronics and then Cell Phones
    And the user selects a smartphone
    Then the user should see the correct price
    And the shopping cart should be empty
    When the user adds the product to cart
    Then the shopping cart should show one item
    And the cart should display correct product details
    When the user goes to the cart
    And the user attempts to checkout
    Then an error message should appear
    When the user accepts terms of service
    And the user attempts to checkout again
    Then the user should proceed with the checkout process

// src/main/java/pages/HomePage.java
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utils.WaitUtils;

public class HomePage {
    private WebDriver driver;
    private WaitUtils waitUtils;

    @FindBy(xpath="//ul[contains(@class,'top-menu')]//a[contains(text(),'Electronics')]")
    private WebElement electronicsMenu;

    @FindBy(xpath="//ul[contains(@class,'top-menu')]//a[contains(text(),'Cell phones')]")
    private WebElement cellPhonesSubMenu;

    @FindBy(xpath="//span[@class='cart-label' and contains(text(),'Shopping cart')]")
    private WebElement shoppingCartLabel;

    @FindBy(xpath="//span[@class='cart-qty']")
    private WebElement cartQuantity;

    public HomePage(WebDriver driver) {
        this.driver = driver;
        this.waitUtils = new WaitUtils(driver);
        PageFactory.initElements(driver, this);
    }

    public String getPageTitle() {
        return driver.getTitle();
    }

    public void navigateToElectronicsCellPhones() {
        Actions actions = new Actions(driver);
        waitUtils.waitForElementToBeVisible(electronicsMenu);
        actions.moveToElement(electronicsMenu).perform();
        waitUtils.waitForElementToBeVisible(cellPhonesSubMenu);
        cellPhonesSubMenu.click();
    }

    public String getShoppingCartQuantity() {
        waitUtils.waitForElementToBeVisible(cartQuantity);
        return cartQuantity.getText();
    }

    public boolean isShoppingCartEmpty() {
        return getShoppingCartQuantity().equals("(0)");
    }
}

// src/main/java/pages/ElectronicsPage.java
package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utils.WaitUtils;

public class ElectronicsPage {
    private WebDriver driver;
    private WaitUtils waitUtils;

    @FindBy(xpath="//h2[@class='product-title']/a[contains(text(),'Smartphone')]")
    private WebElement smartphoneProduct;

    public ElectronicsPage(WebDriver driver) {
        this.driver = driver;
        this.waitUtils = new WaitUtils(driver);
        PageFactory.initElements(driver, this);
    }

    public void selectSmartphone() {
        waitUtils.waitForElementToBeClickable(smartphoneProduct);
        smartphoneProduct.click();
    }

    public String getPageTitle() {
        return driver.getTitle();
    }
}

// src/main/java/pages/ProductDetailsPage.java
package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utils.WaitUtils;

public class ProductDetailsPage {
    private WebDriver driver;
    private WaitUtils waitUtils;

    @FindBy(xpath="//span[@itemprop='price' and contains(@class, 'price-value')]")
    private WebElement productPrice;

    @FindBy(xpath="//input[contains(@id,'add-to-cart-button')]")
    private WebElement addToCartButton;

    @FindBy(xpath="//span[@class='cart-label' and contains(text(),'Shopping cart')]")
    private WebElement shoppingCartLink;

    @FindBy(xpath="//span[@class='cart-qty']")
    private WebElement cartQuantity;

    @FindBy(xpath="//h1[@itemprop='name']")
    private WebElement productName;

    public ProductDetailsPage(WebDriver driver) {
        this.driver = driver;
        this.waitUtils = new WaitUtils(driver);
        PageFactory.initElements(driver, this);
    }

    public String getProductPrice() {
        waitUtils.waitForElementToBeVisible(productPrice);
        return productPrice.getText();
    }

    public void addToCart() {
        waitUtils.waitForElementToBeClickable(addToCartButton);
        addToCartButton.click();
    }

    public String getCartQuantity() {
        waitUtils.waitForElementToBeVisible(cartQuantity);
        return cartQuantity.getText();
    }

    public void goToCart() {
        waitUtils.waitForElementToBeClickable(shoppingCartLink);
        shoppingCartLink.click();
    }

    public String getProductName() {
        waitUtils.waitForElementToBeVisible(productName);
        return productName.getText();
    }
}

// src/main/java/pages/ShoppingCartPage.java
package pages;

import org.openqa.selenium.Alert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utils.WaitUtils;

public class ShoppingCartPage {
    private WebDriver driver;
    private WaitUtils waitUtils;

    @FindBy(xpath="//span[@class='product-unit-price']")
    private WebElement unitPrice;

    @FindBy(xpath="//a[@class='product-name']")
    private WebElement productName;

    @FindBy(xpath="//input[contains(@name,'itemquantity')]")
    private WebElement quantity;

    @FindBy(xpath="//button[contains(@id,'checkout')]")
    private WebElement checkoutButton;

    @FindBy(xpath="//input[@id='termsofservice']")
    private WebElement termsOfServiceCheckbox;

    @FindBy(xpath="//div[@id='terms-of-service-warning-box']")
    private WebElement termsWarningBox;

    @FindBy(xpath="//button[@class='ui-button ui-corner-all ui-widget']")
    private WebElement closePopupButton;

    public ShoppingCartPage(WebDriver driver) {
        this.driver = driver;
        this.waitUtils = new WaitUtils(driver);
        PageFactory.initElements(driver, this);
    }

    public String getUnitPrice() {
        waitUtils.waitForElementToBeVisible(unitPrice);
        return unitPrice.getText();
    }

    public String getProductName() {
        waitUtils.waitForElementToBeVisible(productName);
        return productName.getText();
    }

    public String getQuantity() {
        waitUtils.waitForElementToBeVisible(quantity);
        return quantity.getAttribute("value");
    }

    public void clickCheckout() {
        waitUtils.waitForElementToBeClickable(checkoutButton);
        checkoutButton.click();
    }

    public boolean isErrorMessageDisplayed() {
        waitUtils.waitForElementToBeVisible(termsWarningBox);
        return termsWarningBox.isDisplayed();
    }

    public void closeWarningPopup() {
        waitUtils.waitForElementToBeClickable(closePopupButton);
        closePopupButton.click();
    }

    public void acceptTermsOfService() {
        waitUtils.waitForElementToBeClickable(termsOfServiceCheckbox);
        termsOfServiceCheckbox.click();
    }
}

// src/main/java/utils/WebDriverManager.java
package utils;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class WebDriverManager {
    private static WebDriver driver;
    
    private WebDriverManager() {
        // Private constructor to prevent instantiation
    }
    
    public static WebDriver getDriver() {
        if (driver == null) {
            String browser = System.getProperty("browser", "chrome");
            
            switch (browser.toLowerCase()) {
                case "firefox":
                    driver = new FirefoxDriver();
                    break;
                case "chrome":
                default:
                    driver = new ChromeDriver();
                    break;
            }
            
            driver.manage().window().maximize();
        }
        return driver;
    }
    
    public static void quitDriver() {
        if (driver != null) {
            driver.quit();
            driver = null;
        }
    }
}

// src/main/java/utils/WaitUtils.java
package utils;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;

public class WaitUtils {
    private WebDriver driver;
    private WebDriverWait wait;
    
    public WaitUtils(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    }
    
    public void waitForElementToBeVisible(WebElement element) {
        wait.until(ExpectedConditions.visibilityOf(element));
    }
    
    public void waitForElementToBeClickable(WebElement element) {
        wait.until(ExpectedConditions.elementToBeClickable(element));
    }
    
    public void waitForPageTitleContains(String title) {
        wait.until(ExpectedConditions.titleContains(title));
    }
}

// src/test/java/stepdefinitions/WebshopSteps.java
package stepdefinitions;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import pages.ElectronicsPage;
import pages.HomePage;
import pages.ProductDetailsPage;
import pages.ShoppingCartPage;
import utils.WebDriverManager;
import utils.WaitUtils;

public class WebshopSteps {
    private WebDriver driver;
    private HomePage homePage;
    private ElectronicsPage electronicsPage;
    private ProductDetailsPage productDetailsPage;
    private ShoppingCartPage shoppingCartPage;
    private WaitUtils waitUtils;
    
    @Before
    public void setup() {
        driver = WebDriverManager.getDriver();
        homePage = new HomePage(driver);
        electronicsPage = new ElectronicsPage(driver);
        productDetailsPage = new ProductDetailsPage(driver);
        shoppingCartPage = new ShoppingCartPage(driver);
        waitUtils = new WaitUtils(driver);
    }
    
    @After
    public void tearDown() {
        WebDriverManager.quitDriver();
    }
    
    @Given("the user opens the demo webshop application")
    public void openDemoWebshop() {
        driver.get("https://demo.nopcommerce.com/");
    }
    
    @Then("the user should see the correct page title")
    public void verifyPageTitle() {
        String actualTitle = homePage.getPageTitle();
        Assert.assertTrue(actualTitle.contains("nopCommerce demo store"), 
                "Page title does not match expected. Actual: " + actualTitle);
    }
    
    @When("the user navigates to Electronics and then Cell Phones")
    public void navigateToElectronicsCellPhones() {
        homePage.navigateToElectronicsCellPhones();
        String pageTitle = electronicsPage.getPageTitle();
        Assert.assertTrue(pageTitle.contains("Cell phones"), 
                "Page title does not indicate Cell phones page. Actual: " + pageTitle);
    }
    
    @When("the user selects a smartphone")
    public void selectSmartphone() {
        electronicsPage.selectSmartphone();
    }
    
    @Then("the user should see the correct price")
    public void verifyPrice() {
        String price = productDetailsPage.getProductPrice();
        Assert.assertFalse(price.isEmpty(), "Product price is not displayed");
        // You could also verify the exact price if known
    }
    
    @Then("the shopping cart should be empty")
    public void verifyEmptyCart() {
        Assert.assertTrue(homePage.isShoppingCartEmpty(), 
                "Shopping cart should be empty but isn't");
    }
    
    @When("the user adds the product to cart")
    public void addProductToCart() {
        productDetailsPage.addToCart();
    }
    
    @Then("the shopping cart should show one item")
    public void verifyCartHasOneItem() {
        String cartQty = productDetailsPage.getCartQuantity();
        Assert.assertEquals(cartQty, "(1)", 
                "Shopping cart should have 1 item but shows: " + cartQty);
    }
    
    @Then("the cart should display correct product details")
    public void verifyProductDetails() {
        String productName = productDetailsPage.getProductName();
        Assert.assertTrue(productName.toLowerCase().contains("smartphone"), 
                "Product name should contain 'smartphone' but is: " + productName);
    }
    
    @When("the user goes to the cart")
    public void goToCart() {
        productDetailsPage.goToCart();
    }
    
    @When("the user attempts to checkout")
    public void attemptCheckout() {
        shoppingCartPage.clickCheckout();
    }
    
    @Then("an error message should appear")
    public void verifyErrorMessage() {
        Assert.assertTrue(shoppingCartPage.isErrorMessageDisplayed(), 
                "Error message about terms of service is not displayed");
        shoppingCartPage.closeWarningPopup();
    }
    
    @When("the user accepts terms of service")
    public void acceptTermsOfService() {
        shoppingCartPage.acceptTermsOfService();
    }
    
    @When("the user attempts to checkout again")
    public void attemptCheckoutAgain() {
        shoppingCartPage.clickCheckout();
    }
    
    @Then("the user should proceed with the checkout process")
    public void verifyCheckoutProcess() {
        // This step would verify you're on the checkout page
        // This assertion would depend on what happens in the actual application
        String pageTitle = driver.getTitle();
        Assert.assertTrue(pageTitle.contains("Checkout"), 
                "User should be on the checkout page. Actual title: " + pageTitle);
    }
}

// src/test/java/runners/TestRunner.java
package runners;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(
    features = "src/test/resources/features",
    glue = {"stepdefinitions"},
    plugin = {
        "pretty",
        "html:target/cucumber-reports/cucumber-pretty.html",
        "json:target/cucumber-reports/CucumberTestReport.json",
        "rerun:target/cucumber-reports/rerun.txt"
    },
    monochrome = true
)
public class TestRunner extends AbstractTestNGCucumberTests {
}

// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.webshop</groupId>
    <artifactId>webshop-automation</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <selenium.version>4.15.0</selenium.version>
        <cucumber.version>7.14.0</cucumber.version>
        <testng.version>7.8.0</testng.version>
    </properties>

    <dependencies>
        <!-- Selenium -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.version}</version>
        </dependency>

        <!-- Cucumber -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber.version}</version>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>${cucumber.version}</version>
        </dependency>

        <!-- TestNG -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <suiteXmlFiles>
                        <suiteXmlFile>testng.xml</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.7.5</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>webshop-automation</projectName>
                            <outputDirectory>${project.build.directory}/cucumber-reports</outputDirectory>
                            <inputDirectory>${project.build.directory}/cucumber-reports</inputDirectory>
                            <jsonFiles>
                                <param>**/*.json</param>
                            </jsonFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

// testng.xml
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Webshop Automation Suite">
    <test name="Webshop Tests">
        <classes>
            <class name="runners.TestRunner"/>
        </classes>
    </test>
</suite>
